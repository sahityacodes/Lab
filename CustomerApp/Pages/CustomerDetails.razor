@using System.Data.SqlClient;
@inject NavigationManager NavigationManager
@inject IBLL<Customer> customerService

@if (showForm)
{
    <div class="overlay-form"></div>
    <div class="container">
        <button class="closebtn" @onclick="OnClose">🗙</button>
        <div class="title">@heading</div>
        <div class="content">
            <EditForm Model="@customer" OnValidSubmit="OnValidSubmit">
                <div class="user-details">
                    <DataAnnotationsValidator />
                    <div class="input-box">
                        <label>Name</label>
                        <input @bind="customer.Name" placeholder="Enter your Name" maxlength="25" />
                        <ValidationMessage For="@(() => customer.Name)" />
                    </div>
                    <div class="input-box">
                        <label>Phone</label>
                        <input @bind="customer.Phone" placeholder="Enter your Phone Number" maxlength="13" />
                        <ValidationMessage For="@(() => customer.Phone)" />
                    </div>
                    <div class="input-box">
                        <label>VAT</label>
                        <input @bind="customer.VAT" placeholder="Enter your VAT" maxlength="16"/>
                        <ValidationMessage For="@(() => customer.VAT)" />
                    </div>
                    <div class="input-box">
                        <label>Annual Revenue</label>
                        <input type="number" @bind="customer.AnnualRevenue" placeholder="Enter your Annual Revenue" maxlength="16"/>
                        <ValidationMessage For="@(() => customer.AnnualRevenue)" />
                    </div>
                    <div class="input-box">
                        <label>Address</label>
                        <input type="text" @bind="customer.Address" placeholder="Enter your Address" maxlength="50" />
                        <ValidationMessage For="@(() => customer.Address)" />
                    </div>
                    <div class="input-box">
                        <label>City</label>
                        <input type="text" @bind="customer.City" placeholder="Enter your City" maxlength="20"/>
                        <ValidationMessage For="@(() => customer.City)" />
                    </div>
                </div>
                <text class="error-text">@errorMessage</text>
                <div class="button">
                    <input type="submit" value="@buttonName">
                </div>
            </EditForm>
        </div>
    </div>
}
@if (submissionSuccess)
{
    <div class="overlay-form"></div>
    <dialog class="centered" open>
        <text>@dialogText</text>
    </dialog>
}
@code {
    [Parameter]
    public int customerID { get; set; }

    [Parameter]
    public bool isFormNew { get; set; }

    private string errorMessage = "";

    private string heading = "Add a new customer";

    private string buttonName = "Add";

    private Customer customer = new Customer();

    private bool submissionSuccess;

    private bool showForm = true;

    public RenderFragment successDialog { get; set; }

    private string dialogText = "Inserted Successfully";

    protected override void OnInitialized()
    {
        if (!isFormNew)
        {
            try
            {
                customer = customerService.GetOne(customerID);
                heading = "Edit Customer";
                buttonName = "Update";
            }
            catch (Exception)
            {
                errorMessage = "Could not fetch customer info.";
            }
        }
    }

    private async void OnValidSubmit()
    {
        if (!isFormNew)
        {
            try
            {
                if (customerService.UpdateOne(customer))
                {
                    showForm = false;
                    await ShowDialog();
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            catch (SqlException sqlExc)
            {
                if (sqlExc.Number == 2627)
                {
                    errorMessage = "VAT is already present in the system.";
                }
                else throw;
            }
            catch (Exception)
            {
                errorMessage = "Error in the system.";
            }
        }
        else
        {
            try
            {
                if (customerService.InsertOne(customer))
                {
                    showForm = false;
                    await ShowDialog();
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            catch (SqlException sqlExc)
            {
                if (sqlExc.Number == 2627)
                {
                    errorMessage = "VAT is already present in the system.";
                }
                else throw;
            }
            catch (Exception)
            {
                errorMessage = "Error in the system.";
            }
        }
    }

    private void OnClose()
    {
        try
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception)
        {
            StateHasChanged();
        }
    }

    public async Task ShowDialog()
    {
        submissionSuccess = true;
        await Task.Delay(1000);
    }
}
